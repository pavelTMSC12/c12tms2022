/**
 * https://javarush.ru/groups/posts/1966-principih-obhhektno-orientirovannogo-programmirovanija
 */
public class Info {
    /**
     * ООП: 4 принцепа
     *  - Наследование - механизм, который позволяет описать новый класс на основе существующего (базовый, супер класс, родительского).
     *  При этом свойства и функциональность родительского класса заимствуются новым классом.
     *  Новый класс - дочерний, наследник, производный класс, потомок
     *  Пример: все мы чем-то похожи на наших родителей, а чем-то отличаемся от них.
     *  Плюсы:
     *  1)повторное использование кода. Поля и методы, описанные в родительских классах, можно использовать в классах-потомках.
     *  2)меньше кода дублирующего кода.
     *  3)классы становятся гораздо проще
     *  Пример: военослужащий это дочерний класс Person. у него будет звание, он расширит функционал Person до военослужещего.
     *
     *  - Абстракция - выделение главных, наиболее значимых характеристик предмета и наоборот — отбрасывание второстепенных, незначительных.
     *  Абстракция означает использование простых вещей для описания чего-то сложного.
     *  Например, мы все знаем как пользоваться телевизором, но в тоже время нам не нужно обладать знаниями о том,
     *  как он работает чтобы смотреть его.
     *  Использование данного принципа позволяет избежать сложности при разработке ПО.
     *  Приготовление кофе с помощью кофемашины является хорошим примером абстракции.
     *  Все, что нам надо знать, что бы ей пользоваться: как налить воды, засыпать кофейные зерна, включить и выбрать вид кофе, который хотим получить.
     *  А, как машина будет варить кофе — нам знать не нужно.
     *  В данном примере кофемашина представляет собой абстракцию, которая от нас скрывает все подробности варки кофе.
     *  Нам лишь остается просто взаимодействовать с простым интерфейсом, который не требует от нас каких-либо знаний о внутренней реализации машины.
     *
     *  - Инкапсуляция - означает ограничение доступа к данным и возможностям их изменения.
     * В основе лежит слово «капсула». В эту «капсулу» мы прячем какие-то важные для нас данные,
     * которые не хотим, чтобы кто-то менял.
     * Имя и фамилия «инкапсулирован» в паспортном столе: поменять имя фамилию можно только там, и сделать это можешь только ты.
     * деньги в твоей квартире. Оставлять их на виду посреди комнаты — не лучшая идея. Любой «пользователь» (человек, пришедший к тебе домой)
     * сможет изменить число твоих денег, т.е. забрать их. Лучше инкапсулировать их в сейфе. Доступ будет только у тебя и только по специальному коду.
     * Пример: военкомат не видит как регистратура получаетлюдей, он знает что есть метод в который отдать адресс
     * и получить список людей реализация скрыта внутри класса регистратура.
     * Также car.Car и внутрений класс двигатель(инкапсулирован в машину сокрытие реализации)
     *
     *  - Полиморфизм(многоформенность)
     *  Полиморфизм предоставляет возможность единообразно обрабатывать объекты с различной реализацией при условии наличия у них общего интерфейса или класса.
     *  По-простому: способность вызывать нужные методы у объектов, имеющие разные типы (но находящиеся в одной иерархии).
     *  При этом происходит автоматический выбор нужного метода в зависимости от типа объекта.
     *
     *  Рассмотрим примеры полиморфизма в Java: переопределение и перегрузка методов.
     * В случае с переопределением метода, дочерний класс, используя концепцию полиморфизма,
     * может изменить (переопределить) поведение метода родительского класса.
     * Это позволяет программисту по разному использовать один и тот же метод, определяя поведение из контекста вызова
     * (вызывается метод из класса предка или класса наследника).
     * В случае же с перегрузкой, метод может проявлять различное поведение в зависимости от того,
     * какие аргументы он принимает. В данном случае контекст вызова определяется набором параметров метода.
     *
     *
     *
     *
     *
     *
     */
}
